<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="WelcomeMessage" xml:space="preserve">
    <value>Welcome to the application!</value>
  </data>
  <data name="MenuChoices" xml:space="preserve">
    <value>1. Create a backup works
2. Show all the backup works
3. Delete a backup work
4. Update a backup work
5. Launch a backup work
6. Change the application language
7. Configure log format
8. Exit</value>
  </data>
  <data name="SelectOption" xml:space="preserve">
    <value>Please select an option:</value>
  </data>
  <data name="Confirmation" xml:space="preserve">
    <value>Are you sure you want to perform this action? (y/n)</value>
  </data>
  <data name="InputError" xml:space="preserve">
    <value>Invalid input. Please try again</value>
  </data>
  <data name="NoBackupAvailable" xml:space="preserve">
    <value>No backup works available.</value>
  </data>
  <data name="Works" xml:space="preserve">
    <value>---Work {0} ---
Name: {1}
Source: {2}
Target: {3}
Type: {4}
State: {5}</value>
  </data>
  <data name="List" xml:space="preserve">
    <value>Here is the list of your backup works: </value>
  </data>
  <data name="Work" xml:space="preserve">
    <value>Here is the work details:
Name: {0}
Source: {1}
Target: {2}
Type: {3}
State: {4}</value>
  </data>
  <data name="CurrentWork" xml:space="preserve">
    <value>Current work details:
Name: {0}
Source: {1}
Target: {2}
Type: {3}
State: {4}</value>
  </data>
  <data name="AskWorkName" xml:space="preserve">
    <value>Please enter the name of the work:</value>
  </data>
  <data name="LeaveMessage" xml:space="preserve">
    <value>Thank you for using the application. Goodbye!</value>
  </data>
  <data name="NoWorkAvailable" xml:space="preserve">
    <value>No work available with this name.</value>
  </data>
  <data name="CreateWorkMessage" xml:space="preserve">
    <value>Work created successfully!</value>
  </data>
  <data name="DeleteWorkMessage" xml:space="preserve">
    <value>Work deleted successfully!</value>
  </data>
  <data name="UpdateWorkMessage" xml:space="preserve">
    <value>Work updated successfully!</value>
  </data>
  <data name="ContinueMessage" xml:space="preserve">
    <value>Press any key to continue...</value>
  </data>
  <data name="MaxBackupMessage" xml:space="preserve">
    <value>You have reached the maximum number of backup works (5). Please delete one before creating a new one.</value>
  </data>
  <data name="LaunchMessage" xml:space="preserve">
    <value>Launching the backup work...</value>
  </data>
  <data name="InvalidOption" xml:space="preserve">
    <value>Invalid option. Please try again.</value>
  </data>
  <data name="UpdateChoices" xml:space="preserve">
    <value>1. Name of the backup work
2. Source directory
3. Target directory
4. Type
5. Exit</value>
  </data>
  <data name="AlreadyInProgress" xml:space="preserve">
    <value>A backup work is already underway.</value>
  </data>
  <data name="AlreadyInUse" xml:space="preserve">
    <value>The selected language is already in use.</value>
  </data>
  <data name="AskUpdate" xml:space="preserve">
    <value>Please select the option you want to update:</value>
  </data>
  <data name="LanguageChoices" xml:space="preserve">
    <value>Our application is available in these two languages:
1. English
2. French</value>
  </data>
  <data name="ChangeLanguageMessage" xml:space="preserve">
    <value>The language has been changed successfully.</value>
  </data>
  <data name="AskSaveName" xml:space="preserve">
    <value>Please enter the name of the backup work:</value>
  </data>
  <data name="AskSource" xml:space="preserve">
    <value>Please enter your source:</value>
  </data>
  <data name="AskTarget" xml:space="preserve">
    <value>Please enter your target:</value>
  </data>
  <data name="AskType" xml:space="preserve">
    <value>Please enter the type of the backup work: </value>
  </data>
  <data name="EnterChoice" xml:space="preserve">
    <value>Enter your choice: </value>
  </data>
</root>